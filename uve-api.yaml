openapi: 3.0.1
servers:
  - url: 'https://api.uve.demo.ubirch.com/'
    description: Universal Verification Endpoint - STAGING API server. Works only with DCCs signed with DEMO keys.
  - url: 'https://api.uve.ubirch.com/'
    description: Universal Verification Endpoint - PRODUCTION API server.
info:
  title: Universal Verification Endpoint API
  description: |
    Universal Verification Endpoint (UVE) to verify EU Digital COVID Certificates (DCC).

    ```
    Copyright (C) 2022 UBIRCH GmbH

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    ```
  version: 1.0.2
  license:
    name: 'Apache License, Version 2.0'
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
  contact:
    name: UBIRCH GmbH
    url: 'https://ubirch.com'
    email: support@ubirch.com
paths:
  /api/uve/v3/jwk:
    get:
      tags:
        - Verification
      summary: Returns the public key used to verify signatures in jwk format
      description: returns the jwk for the current signatures verification
      responses:
        '200':
          description: Public key is available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKOfPublicKey'
  /api/uve/v3/verify:
    post:
      tags:
        - Verification
      summary: Verify a digital health certificate (DCC) or an Ukrainian ePassport for authenticity and validate a DCC against a country-specific set of business rules.
      description: |
        # Description

        Verify a Digital COVID Certificate (DCC) or an Ukrainian ePassport.

        ## Digital COVID Certificate (DCC) Verification
        Checks the signature, expiration time, and verifies the authenticity of a Digital COVID Certificate (DCC), and validates
        the Certificate payload against a list of rules which vary per country.

        This endpoint provides the ability to perform a simple owner check based on the transliterated values of the person's names and datebirth.

        The rules are obtained from the EU-Gateway, which are published at [https://distribution.dcc-rules.de/rules](https://distribution.dcc-rules.de/rules)

        The rule evaluation generates one of the following responses for each country requested:

        **Accepted**: If the given dcc satisfies all the rules.

        **Rejected**: If the given dcc does not satisfy one of the rules.

        **NoRuleForCountry**: If the given country has no rule for any type of DCC.

        **NoRuleForDCCType**: If the given country has no rule for given DCC type but have some rules for other types.

        **CryptographicallyExpired**: If the given DCC cryptographically expired.

        ## Ukrainian ePassport Verification
        Checks the signature, expiration time, and verifies the authenticity of an Ukrainian ePassport

        ## Authentication
        Requires mTLS-authentication with a X509 certificate.
        Maximum allowed data size of incoming CBOR is 1500 bytes.

      parameters:
        - in: header
          name: X-Transaction-Id
          description: A random and unique transaction id for every request against the api used for accounting generated by the user.
          schema:
            type: string
          example: 2b98009c-d4f6-11eb-8a22-1e00312e7f59
          required: true
        - in: header
          name: X-Transaction-Tag
          description: An optional random tag used for accounting specified by the user.
          schema:
            type: string
          example: HAM-Termninal-1
          required: false
        - in: header
          name: X-Verify-For
          description: |
            An optional value that specifies the jurisdiction to check. It supports EU, NHS and UA.
            If no value or header is provided, EU is assumed by default. The accepted values are EU, NHS or UA.
            You can think of this header as a verification on the origin of the certificate - if the signer is valid -
          schema:
            type: string
            enum: [ EU, NHS, UA ]
          example: UA
          required: false
        - in: header
          name: X-Validate-For
          description: |
            A comma-separated value of the countries to check. If no values or header is provided, all supported countries will be checked.

            The list of supported countries is:

            ["IT","LT","DK","GR","CZ","HR","IS","PT","PL","BE","BG","DE","LU","EE","CY","ES","NL","AT","LV","LI","FI","SE","SI","RO","NO","SK","FR","MT","HU","IE","CH","VA","SM","UA","TR","MK","AD","MC","FO","MA","AL","IL","PA","GB","AM"]

            You can think of this header as a validation based on the destination countries.

          schema:
            type: string
          example: DE,FR
          required: false
        - in: header
          name: X-Dc-Type
          description: |
            An optional value that specifies the certificate type to check.
            It supports: DCC and DIC.
            If no value or header is provided, DCC is assumed
          schema:
            type: string
            enum: [ DCC, DIC ]
          example: DIC
          required: false
        - schema:
            type: string
          in: header
          name: X-Forwarded-Tls-Client-Cert
          description: X509 pem string. It has to be a chained certificate as comma-separated string.
        - in: header
          name: X-Date-To-Check
          description: An optional date in the future that is additionally used for testing the validity of the cryptograhic date.
          schema:
            type: string
          example: 2022-02-02
          required: false
        - in: query
          name: verbose
          description: An optional boolean value that makes the response verbose. If not provided, false is assumed.
          schema:
            type: boolean
          example: true
          required: false
        - in: query
          name: fnt
          description: It specifies the transliterated family name of the person for simple owner check. Data must be provided as in the certificate.
          schema:
            type: string
          example: DIESSNER<MUSTERFRAU
          required: false
        - in: query
          name: gnt
          description: It specifies the transliterated given name of the person for simple owner check. Data must be provided as in the certificate.
          schema:
            type: string
          example: ERIKA<DOERTE
          required: false
        - in: query
          name: dob
          description: It specifies the birth date of the person for simple owner check. Data must be provided as in the certificate.
          schema:
            type: string
          example: 1970-01-01
          required: false
      requestBody:
        description: The encoded representation of a certificate. Maximum allowed data size of incoming CBOR is 1500 bytes.
        content:
          application/cbor+base45:
            schema:
              $ref: '#/components/schemas/CertificateEncoded'
      responses:
        '200':
          description: Certificate Payload is authentic or not for the list of destination countries.
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/CertificatePayloadValidationV3'
        '400':
          description: Invalid certificate, or invalid simple owner check, or invalid parameters.
        '403':
          description: Forbidden.
        '406':
          description: Incorrect data modelIncorrect data model
        '500':
          description: Internal Server Error
  /api/uve/v2/verify:
    post:
      tags:
        - Verification
      summary: Verify a digital health certificate for authenticity and validate it against a country-specific set of business rules.
      description: |
        # Description

        Checks the signature, expiration time, and verifies the authenticity of a Digital COVID Certificate (DCC), and validates
        the Certificate payload against a list of rules which vary per country.

        This endpoint provides the ability to perform a simple owner check based on the transliterated values of the person's names and datebirth.

        The rules are obtained from the EU-Gateway, which are published at [https://distribution.dcc-rules.de/rules](https://distribution.dcc-rules.de/rules)

        Requires mTLS-authentication with a X509 certificate.
        Maximum allowed data size of incoming CBOR is 1500 bytes.

        The rule evaluation generates one of the following responses for each country requested:

        **Accepted**: If the given dcc satisfies all the rules.

        **Rejected**: If the given dcc does not satisfy one of the rules.

        **NoRuleForCountry**: If the given country has no rule for any type of DCC.

        **NoRuleForDCCType**: If the given country has no rule for given DCC type but have some rules for other types.

        **CryptographicallyExpired**: If the given DCC cryptographically expired.
      parameters:
        - in: header
          name: X-Transaction-Id
          description: A random and unique transaction id for every request against the api used for accounting generated by the user.
          schema:
            type: string
          example: 2b98009c-d4f6-11eb-8a22-1e00312e7f59
          required: true
        - in: header
          name: X-Transaction-Tag
          description: An optional random tag used for accounting specified by the user.
          schema:
            type: string
          example: HAM-Termninal-1
          required: false
        - in: header
          name: X-Verify-For
          description: |
            An optional value that specifies the jurisdiction to check. It supports EU and NHS.
            If no value or header is provided, EU is assumed by default. The accepted values are EU or NHS.
            You can think of this header as a verification on the origin of the certificate - if the signer is valid -
          schema:
            type: string
            enum: [ EU, NHS ]
          example: NHS
          required: false
        - in: header
          name: X-Validate-For
          description: |
            A comma-separated value of the countries to check. If no values or header is provided, all supported countries will be checked.

            The list of supported countries is:

            ["IT","LT","DK","GR","CZ","HR","IS","PT","PL","BE","BG","DE","LU","EE","CY","ES","NL","AT","LV","LI","FI","SE","SI","RO","NO","SK","FR","MT","HU","IE","CH","VA","SM","UA","TR","MK","AD","MC","FO","MA","AL","IL","PA","GB","AM"]

            You can think of this header as a validation based on the destination countries.

          schema:
            type: string
          example: DE,FR
          required: false
        - schema:
            type: string
          in: header
          name: X-Forwarded-Tls-Client-Cert
          description: X509 pem string. It has to be a chained certificate as comma-separated string.
        - in: header
          name: X-Date-To-Check
          description: An optional date in the future that is additionally used for testing the validity of the cryptograhic date.
          schema:
            type: string
          example: 2022-02-02
          required: false
        - in: query
          name: verbose
          description: An optional boolean value that makes the response verbose. If not provided, false is assumed.
          schema:
            type: boolean
          example: true
          required: false
        - in: query
          name: fnt
          description: It specifies the transliterated family name of the person for simple owner check. Data must be provided as in the certificate.
          schema:
            type: string
          example: DIESSNER<MUSTERFRAU
          required: false
        - in: query
          name: gnt
          description: It specifies the transliterated given name of the person for simple owner check. Data must be provided as in the certificate.
          schema:
            type: string
          example: ERIKA<DOERTE
          required: false
        - in: query
          name: dob
          description: It specifies the birth date of the person for simple owner check. Data must be provided as in the certificate.
          schema:
            type: string
          example: 1970-01-01
          required: false
      requestBody:
        description: The encoded representation of a certificate. Maximum allowed data size of incoming CBOR is 1500 bytes.
        content:
          application/cbor+base45:
            schema:
              $ref: '#/components/schemas/CertificateEncoded'
      responses:
        '200':
          description: Certificate Payload is authentic or not for the list of destination countries.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificatePayloadValidationV2'
        '400':
          description: Invalid certificate, or invalid simple owner check, or invalid parameters.
        '403':
          description: Forbidden.
        '406':
          description: Incorrect data modelIncorrect data model
        '500':
          description: Internal Server Error
  /api/uve/v1/verify:
    post:
      tags:
        - Verification
      summary: (Legacy) Verify a digital health certificate for authenticity.
      description: |
        **This is a legacy version. Please use or upgrade to the v2 version of this endpoint.**

        # Description
        Checks the signature and verifies the authenticity of a Digital COVID Certificate (DCC).

        Requires mTLS-authentication with a X509 certificate.
      parameters:
        - in: header
          name: X-Transaction-Id
          description: A random and unique transaction id for every request against the api used for accounting generated by the user.
          schema:
            type: string
          example: 2b98009c-d4f6-11eb-8a22-1e00312e7f59
          required: true
        - in: header
          name: X-Transaction-Tag
          description: An optional random tag used for accounting specified by the user.
          schema:
            type: string
          example: HAM-Termninal-1
          required: false
        - in: header
          name: X-Verify-For
          description: |
            An optional value that specifies the jurisdiction to check. It supports EU and NHS.
            If no value or header is provided, EU is assumed by default. The accepted values are EU or NHS.
          schema:
            type: string
            enum: [ EU, NHS ]
          example: NHS
          required: false
        - schema:
            type: string
          in: header
          name: X-Forwarded-Tls-Client-Cert
          description: X509 pem string. It has to be a chained certificate as comma-separated string.
      requestBody:
        description: The encoded representation of a certificate.
        content:
          application/cbor+base45:
            schema:
              $ref: '#/components/schemas/CertificateEncoded'
      responses:
        '200':
          description: Certificate is authentic.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalCovidCertificate'
        '400':
          description: Invalid certificate
        '406':
          description: Incorrect data model
        '500':
          description: Internal Server Error
components:
  schemas:
    DigitalCovidCertificate:
      $ref: schema/DCC.combined-schema.json
    CertificateEncoded:
      description: Base45 encoded and compressed Digital Corona Certificate (DCC) according to EU specification. An encoded certificate can be directly rendered as a QR code according to the EU specification.
      type: string
      format: base45
      example: 'HC1:6BFMX1.-N3PO0008GSJ31*SGP96B$0.-8$SQ6H865IQ0GP222J8-O0QJM9+V5K47YMCDC0KC8UQUC05A22WHY/G9-4LI1QJ0$BE%NRV%G21O5IVYCRU906N764PDY8*JBJ7GKOA2+EVHS7+T1 S0OF6:SJ%VPDEM2P59CQMBIQTCSIP/0ZPP799/W8X74EOCT6H5BKGS0-WJR5Q+:SOT7JK5UQ49HP*/Q1*S57TB$QH*OGVB:DN776KT80-3E9I.H4M U5.C30PU$CAMF+T9Y2QWQ1X4RZUH2PNF0A:3HJO0S6AD515J35RM.C8S3HKQ29 G+OQ44LOLJ+20H-3374Z.EG3H$E4112S22$MPLG7%OICKGEI1YC6QRV90B% 7/OMCNRS7BNJ19W1F$Q7ZKL6AVILQQM4ME$WGUHA845W2H2ZK*4NKDQ6VF29O:SHPNPFHN+U0$DTPBRR-MF1FSRB+93+*2U6V/RI$9SMWOBORN0OOHFNITC:7QHJ+6ER.7BOA1069CO58HUFBP37*+09NT/0'
    CertificatePayload:
      description: DCC payload from the DCC Certificate. It can be obtained by verifying the DCC with the verify endpoint.
      type: string
      format: json
      example: {
        "ver": "1.3.0",
        "nam": {
          "fn": "Musterfrau-Gößinger",
          "fnt": "MUSTERFRAU<GOESSINGER",
          "gn": "Gabriele",
          "gnt": "GABRIELE"
        },
        "dob": "1998-02-26",
        "v": [
          {
            "tg": "840539006",
            "vp": "1119349007",
            "mp": "EU/1/20/1528",
            "ma": "ORG-100030215",
            "dn": 1,
            "sd": 2,
            "dt": "2021-02-18",
            "co": "AT",
            "is": "Ministry of Health, Austria",
            "ci": "URN:UVCI:01:AT:10807843F94AEE0EE5093FBC254BD813#B"
          }
        ]
      }
    CertificatePayloadValidationResponse:
      type: string
      format: json
      example: [
        {
          "country": "DE",
          "current": {
            "result": "Accepted"
          }
        },
        {
          "country": "FR",
          "current": {
            "result": "Accepted"
          }
        }
      ]
    CertificatePayloadValidationV2:
      type: string
      format: json
      example: {
        "dcc:": {
          "v": [
            {
              "dn": 3,
              "dt": "2021-04-14",
              "id": "8888888",
              "ma": "ORG-100001699",
              "mp": "EU/1/20/1528",
              "sd": 2,
              "tg": "840539006",
              "vp": "1119305005"
            }
          ],
          "dob": "1979",
          "nam": {
            "fn": "MüllèČÇ",
            "gn": "Eriká"
          }
        },
        "validateFor": [
          {
            "country": "DE",
            "current": {
              "result": "Accepted",
              "fails": [ ],
              "successes": [
                {
                  "identifier": "VR-DE-0001",
                  "description": [
                    {
                      "lang": "en",
                      "desc": "The vaccination schedule must be complete (e.g., 1/1, 2/2)."
                    },
                    {
                      "lang": "de",
                      "desc": "Die Impfreihe muss vollständig sein (z.B. 1/1, 2/2)."
                    },
                    {
                      "lang": "fr",
                      "desc": "La série vaccinale doit être complète (p. ex. 1/1, 2/2)."
                    },
                    {
                      "lang": "es",
                      "desc": "La pauta de vacunación debe estar completa (por ejemplo, 1/1, 2/2)."
                    },
                    {
                      "lang": "it",
                      "desc": "Il ciclo di vaccinazione deve essere stato completato (ad es. 1/1, 2/2)."
                    }
                  ]
                }
              ]
            },
            "future": {
              "result": "Accepted",
              "fails": [ ],
              "successes": [
                {
                  "identifier": "VR-DE-0001",
                  "description": [
                    {
                      "lang": "en",
                      "desc": "The vaccination schedule must be complete (e.g., 1/1, 2/2)."
                    },
                    {
                      "lang": "de",
                      "desc": "Die Impfreihe muss vollständig sein (z.B. 1/1, 2/2)."
                    },
                    {
                      "lang": "fr",
                      "desc": "La série vaccinale doit être complète (p. ex. 1/1, 2/2)."
                    },
                    {
                      "lang": "es",
                      "desc": "La pauta de vacunación debe estar completa (por ejemplo, 1/1, 2/2)."
                    },
                    {
                      "lang": "it",
                      "desc": "Il ciclo di vaccinazione deve essere stato completato (ad es. 1/1, 2/2)."
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    JWKOfPublicKey:
      type: string
      format: json
      example: {
          "version": "1.0",
          "ok": true,
          "data": {
            "kty": "EC",
            "x": "35h5GKO7-PJPWjFuonyhcGV9Pu35VqlHc7CbSfV_rO8",
            "y": "BiUIGD5mIGYU8Av2q44Ub6WEiHNt_kc4YxTVYyeQfpk",
            "crv": "P-256"
          }
        }
    CertificatePayloadValidationV3:
      type: object
      oneOf:
        - $ref: '#/components/schemas/CertificatePayloadValidationV3WithValidation'
        - $ref: '#/components/schemas/CertificatePayloadValidationV3WithoutValidation'
    CertificatePayloadValidationV3WithValidation:
      description: |
        DCC payload from the DCC Certificate and the rule validation result which indicates the DCC is authentic or not for the list of destination countries.
        It can be obtained by verifying the DCC with the Version 3 verify endpoint and specifying the DCC value of the `X-Dc-Type` header.
        The signature algorithm is the `SHA512WithECDSA`. The payload is the JSON in the `payload` key of the response and sorted by keys before signing it.
        The signature can be verified with the public key from the `api/uve/v3/jwk` endpoint.
      type: string
      format: json
      example: {
          "payload": {
            "version": "3.0",
            "ok": true,
            "timestamp": 1653380410,
            "data": {
              "dcc": {
                "r": [
                  {
                    "ci": "URN:UVCI:01DE/HF0902001/4EE62B15GW62QURTQ3GOOLNO#V",
                    "co": "DE",
                    "df": "2021-10-01",
                    "du": "2022-03-02",
                    "fr": "2021-09-03",
                    "is": "Robert Koch-Institut",
                    "tg": "840539006"
                  }
                ],
                "dob": "1990-01-01",
                "nam": {
                  "fn": "Mustermann",
                  "gn": "Erika",
                  "fnt": "MUSTERMANN",
                  "gnt": "ERIKA"
                },
                "ver": "1.3.0"
              },
              "validateFor": [
                {
                  "country": "DE",
                  "current": {
                    "result": "Rejected",
                    "fails": [
                      {
                        "identifier": "RR-DE-0002",
                        "description": [
                          {
                            "lang": "en",
                            "desc": "The positive NAA test result (e.g., PCR) must be no older than 90 days."
                          },
                          {
                            "lang": "de",
                            "desc": "Der positive NAA-Test (z.B. PCR) darf maximal 90 Tage zurückliegen."
                          },
                          {
                            "lang": "fr",
                            "desc": "Le test TAN positif (p. ex. PCR) ne doit pas dater de plus de 90 jours."
                          },
                          {
                            "lang": "es",
                            "desc": "Deben haber transcurrido 90 días como máximo desde que una prueba de amplificación de ácidos nucleicos (por ejemplo, una PCR) diese positivo."
                          },
                          {
                            "lang": "it",
                            "desc": "Il NAAT positivo (ad es. test PRC) deve risalire massimo a 90 giorni fa."
                          }
                        ]
                      }
                    ],
                    "successes": [
                      {
                        "identifier": "RR-DE-0001",
                        "description": [
                          {
                            "lang": "en",
                            "desc": "The positive NAA test result (e.g., PCR) must be older than 28 days."
                          },
                          {
                            "lang": "de",
                            "desc": "Der positive NAA-Test (z.B. PCR) muss mindestens 28 Tage zurückliegen."
                          },
                          {
                            "lang": "fr",
                            "desc": "Le test TAN positif (p. ex. PCR) doit dater d\u2018au moins 28 jours."
                          },
                          {
                            "lang": "es",
                            "desc": "Deben haber transcurrido como mínimo 28 días desde que una prueba de amplificación de ácidos nucleicos (por ejemplo, una PCR) diese positivo."
                          },
                          {
                            "lang": "it",
                            "desc": "Il NAAT positivo (ad es. test PRC) deve risalire minimo a 28 giorni fa."
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            "verifyFor": "EU",
            "dcType": "DCC"
          },
          "signature": "MEUCIBVcx74896G6WaDLWeqTL/p71xirfRD41XUwvpARbFBaAiEAwI+uMPcV4DZ8QPxqk+hH6yGme6eYye0yuuBxkBFGrPM="
        }
    CertificatePayloadValidationV3WithoutValidation:
      description: |
        The payload from an Ukrainian ePassport. It can be obtained by verifying an Ukrainian ePassport with the version 3 verify endpoint and specifying the DIC value of X-Dc-Type header.
        The signature algorithm is the `SHA512WithECDSA`. The payload is the JSON in the `payload` key of the response and sorted by keys before signing it.
        The signature can be verified with the public key from the `api/uve/v3/jwk` endpoint.
      type: string
      format: json
      example: {
        "payload": {
          "version": "3.0",
          "ok": true,
          "timestamp": 1652963210,
          "data": {
            "v": [],
            "dob": "01.01.1987",
            "nam": {
              "fn": "Стефа́ник",
              "gn": "Olga",
              "fnt": "Stefanyk",
              "gnt": "Ольга"
            },
            "uId": {
              "rnokpp": "1234567890",
              "docType": "Паспорт громадянина України",
              "birthday": "01.01.1987",
              "genderEN": "M",
              "genderUA": "Ч",
              "docNumber": "АA123456",
              "lastNameEN": "Stefanyk",
              "lastNameUA": "Стефа́ник",
              "firstNameEN": "Olga",
              "firstNameUA": "Ольга",
              "middleNameUA": "",
              "registration": "UA, обл. ДНІПРОПЕТРОВСЬКА, м. ДНІПРО, ул./просп. ВУЛ ЮРІЯ КОНДРАТЮКА, буд. 7, кв. 213",
              "nationalityEN": "",
              "nationalityUA": ""
            },
            "ver": "1.3.0"
          },
          "verifyFor": "EU",
          "dcType": "DIC"
        },
        "signature": "MEQCIAkJDTp5AVsDmewYayksWsEp3iA60zMN3Yven2dNscVcAiBnIrkTESD8xnqczRkNvKeQjfBniLu6bLwNZbbN5odPTg=="
      }
